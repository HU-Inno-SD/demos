version: "3.9"
services:
#  web1:
#    build:
#      context: "."
#      dockerfile: "./development/app/Dockerfile"
#    restart: unless-stopped
#    ports:
#      - "127.0.0.1:8091:8080"
#    env_file: ./development/app/web1.env
#    depends_on:
#      - pg
#  web2:
#    build:
#      context: "."
#      dockerfile: "./development/app/Dockerfile"
#    restart: unless-stopped
#    ports:
#      - "127.0.0.1:8092:8080"
#    env_file: ./development/app/web2.env
#    depends_on:
#      - pg
#      - web1
  lb:
    image: haproxy:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:8090:80"
      - "127.0.0.1:9000:9000"
    volumes:
      - ./development/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
  pg:
    image: postgres:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - ./development/db/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/:ro
    env_file: ./development/db/.env

    #debug: #soms kan het handig zijn om even met een iets minder minimale container -in- het compose-netwerk te zitten
    #image: debian
